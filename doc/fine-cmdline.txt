==============================================================================
*fine-cmdline*

Enter ex-commands in a nice floating input.

==============================================================================
Introduction                                              *fine-cmdline-intro*

Here is the plan: A floating input shows up, you a enter a command and you're
done. You can use `<Tab>` completion like the regular `cmdline`, and can also
navigate the command history with `<Up>` and `<Down>` arrows. That's it.

==============================================================================
Quick Start                                          *fine-cmdline-quickstart*

The easiest way to use it is calling `FineCmdline`... in a keybinding.

Remap `Enter`.

Lua bindings:

>
  vim.api.nvim_set_keymap('n', '<CR>', '<cmd>FineCmdline<CR>', {noremap=true})
<

If you'd like to remap `:` instead.

>
  vim.api.nvim_set_keymap('n', ':', '<cmd>FineCmdline<CR>', {noremap=true})
<

Vimscript bindings:

>
  nnoremap <CR> <cmd>FineCmdline<CR>
<

If you'd like to remap `:` instead.

>
  nnoremap : <cmd>FineCmdline<CR>
<

There is also the possibility to pre-populate the input with something before
it shows up. Say you want to create a keybinding to use `vimgrep`.

>
  <cmd>FineCmdline vimgrep <CR>
<

                                                       *fine-cmdline-from-lua*
                                                           *fine-cmdline.open*

`FineCmdline` is an alias for the function `.open()` in the `fine-cmdline`
module. So this is also valid.

>
  <cmd>lua require("fine-cmdline").open({default_value = ""})<CR>
<

==============================================================================
Configuration                                     *fine-cmdline-configuration*
                                                          *fine-cmdline.setup*

If you want to change anything from the `ui` or add a "hook" you can use
the function `.setup()`.

Here is an example showing all the default values.

>
  require('fine-cmdline').setup({
    cmdline = {
      enable_keymaps = true,
      smart_history = true,
      prompt = ': '
    },
    popup = {
      position = {
        row = '10%',
        col = '50%',
      },
      size = {
        width = '60%',
      },
      border = {
        style = 'rounded',
      },
      win_options = {
        winhighlight = 'Normal:Normal,FloatBorder:FloatBorder',
      },
    },
    hooks = {
      before_mount = function(input)
        -- code
      end,
      after_mount = function(input)
        -- code
      end,
      set_keymaps = function(imap, feedkeys)
        -- code
      end
    }
  })
<

                                         *fine-cmdline.cmdline.enable_keymaps*

Boolean (default true)
When set to `false` this plugin will not set the default keybindings inside
the floating input. This is to ease the integration with completion engines.
You can still restore some of the default behavior on the |set_keymaps| hook.

                                          *fine-cmdline.cmdline.smart_history*

Boolean (default true)
When enabled the user's input becomes a search term, and when they navigate
the command history, only the entries that begin with that term show up.

                                                          *fine-cmdline.popup*

Are the options that control the popup's settings. Accepts any valid key/value
pair that a `nui.popup` can handle. For more details refer to `nui.nvim`
documentation:
https://github.com/MunifTanjim/nui.nvim/tree/main/lua/nui/popup#options

                                                 *fine-cmdline.popup.position*

Determines in which part of the screen the input should be drawn.

                                                     *fine-cmdline.popup.size*

Controls the size of the popup. If `size` can be a `number` or
`percentage string`, can also be a table with `width` and `height`. Do note
input can only have `1` line.

                                                   *fine-cmdline.popup.border*

Contains all border related options like style, text highlight, etc.


                                              *fine-cmdline.popup.win_options*

You can set any variable local to a window (ie. 'signcolumn').
See |options.txt|

                                              *fine-cmdline.popup.buf_options*

You can set any variable local to a window (ie. 'filetype').
See |options.txt|

                                                          *fine-cmdline.hooks*

Functions that will be executed during the lifecycle of the input.

                                             *fine-cmdline.hooks.before_mount*
                                                  *fine-cmdline-change-prompt*

Gets executed before the input drawn in the screen. Receives the instance of
the input as a parameter. In here we could change the prompt.

                                              *fine-cmdline.hooks.after_mount*

Gets executed after the input is drawn on the screen. Receives the
instance of the input as a parameter.

                                              *fine-cmdline.hooks.set_keymaps*

Gets executed after input is drawn on the screen. Provides helper functions
that fixes some limitations on older versions of neovim, specifically v0.5 and
v0.6. If you are using neovim v0.7 you can ignore this hook.

==============================================================================
Keymaps                                                 *fine-cmdline-keymaps*

If you have neovim v0.7 you should setup your keybindings in the
`after_mount`, using the `vim.keymap.set` function.

>
  after_mount = function(input)
    -- make escape go to normal mode
    vim.keymap.set('i', '<Esc>', '<cmd>stopinsert<cr>', {buffer = input.bufnr})
  end
<

If you are using neovim v0.6.1 or lower use the `set_keymaps` hook.

With `set_keymaps` you get two parameters. `imap` makes mappings in
insert mode. `feedkeys` can type keys for you.

Let's say you want to create a shortcut (`Alt + s`) to begin a search and
replace.

>
  set_keymaps = function(imap, feedkeys)
    imap('<M-s>', '%s///gc<Left><Left><Left><Left>')
  end
<

If you need something more complex you can use a function.

>
  set_keymaps = function(imap, feedkeys)
    imap('<M-s>', function()
      if vim.fn.pumvisible() == 0 then
        feedkeys('%s///gc<Left><Left><Left><Left>')
      end
    end)
  end
<
                                                        *fine-cmdline-actions*
                                                             *fine-cmdline.fn*

Every function bound to a default keybinding is exposed in `.fn`. This makes
it possible to restore any default keybinding when |cmdline.enable_keymaps|
is set to `false`.

>
  set_keymaps = function(imap, feedkeys)
    local fn = require('fine-cmdline').fn

    imap('<Esc>', fn.close)
    imap('<C-c>', fn.close)

    imap('<Up>', fn.up_history)
    imap('<Down>', fn.down_history)
  end
<
                                                       *fine-cmdline.fn.close*

If completion menu is visible, hide it. Else, unmounts the input.

                                                   *fine-cmdline.fn.next_item*

Go to the next item in the completion list.

                                               *fine-cmdline.fn.previous_item*

Go to the previous item in the completion list.

                                       *fine-cmdline.fn.complete_or_next_item*

Shows the completion menu if is not visible. Else, navigates to the next item
in the completion list.

                                                  *fine-cmdline.fn.up_history*

Replaces the text in the input with the previous entry in the command history.

                                                *fine-cmdline.fn.down_history*

Replaces the text in the input with the next entry in the command history.

                                           *fine-cmdline.fn.up_search_history*

Take the user input, start a search and show the previous entry that start
with that prefix.

                                         *fine-cmdline.fn.down_search_history*

Take the user input, start a search and show the next entry that start with
that prefix.

==============================================================================
Completion engines                       *fine-cmdline-and-completion-engines*

At the moment only this third-party completion engine works inside the
floating input:

* ddc.vim: https://github.com/Shougo/ddc.vim

Other popular completion engines don't provide completions for ex-commands
outside the built-in command-line.

If you wish to test your completion engine in `fine-cmdline` here is what you
need to do:

* Disable the default keybindings.
* Setup your own keybindings.
* Maybe, modify the prompt.
* Perhaps, setup a custom filetype.

Here is a complete example.

>
  local fineline = require('fine-cmdline')
  local fn = fineline.fn

  fineline.setup({
    cmdline = {
      -- Prompt can influence the completion engine.
      -- Change it to something that works for you
      prompt = ': ',

      -- Let the user handler the keybindings
      enable_keymaps = false
    },
    popup = {
      buf_options = {
        -- Setup a special file type if you need to
        filetype = 'FineLinePrompt'
      }
    },
    hooks = {
      set_keymaps = function(imap, feedkeys)
        -- Restore default keybindings...
        -- Except for `<Tab>`, that's what everyone uses to autocomplete
        imap('<Esc>', fn.close)
        imap('<C-c>', fn.close)

        -- enable these if you want simple history navigation
        -- imap('<Up>', fn.up_history)
        -- imap('<Down>', fn.down_history)

        -- enable these if you want smart history navigation
        -- imap('<Up>', fn.up_search_history)
        -- imap('<Down>', fn.down_search_history)
      end
    }
  })
<

==============================================================================
Caveats                                                 *fine-cmdline-caveats*

This is not a special mode. It's just a normal buffer, incremental search
will not work here.

You'll find that most limitations on this plugin are because it can't enable
`commandline-mode`. When you type in the input your are in `insert mode`.

There is a known issue with |cmdwin| (the thing that shows up when you press
`q:` by accident). `cmdwin` and `fine-cmdline` have the same goal, execute
ex-commands. Problem is `cmdwin` will be the one executing the command,
and you will bump into some weird behavior. If for some reason you're in
`cmdwin` and call `fine-cmdline`, press `<C-c>` twice (one to close the
input, one to close `cmdwin`). Don't try anything else. Just close both.


==============================================================================
Support                                                *fine-cmdline-donation*

If you find this tool useful and want to support my efforts, consider
leaving a tip in https://www.buymeacoffee.com/vonheikemen

vim:tw=78:sw=4:ft=help:norl:
